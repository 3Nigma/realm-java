apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion rootProject.sdkVersion
    buildToolsVersion rootProject.buildTools

    defaultConfig {
        applicationId "io.realm.tests.sync"
        minSdkVersion 9
        targetSdkVersion rootProject.sdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn reverseNodeServerPort, reverseSyncServerPort, startServer
    }
}

task untarRealmServer(type: Exec) {
//    commandLine 'pwd'
    commandLine 'tar', 'zxf', '/opt/realm-sync-0.27.4-101.tgz'
}

task reverseNodeServerPort(type: Exec) {
    def adb = android.getAdbExe()?.toString() ?: 'false'
    commandLine adb, 'reverse', 'tcp:8888', 'tcp:8888'
    ignoreExitValue true
    doLast {
        if (execResult.getExitValue() != 0) {
            logger.error(
                    '===========================================================================\n' +
                            'WARNING: Failed to automatically reverse port 8888.\n' +
                            'Please reverse this port from localhost to the device or emulator being used to run the application.\n' +
                            'You may need to add the appropriate flags to the command that failed:\n' +
                            '    adb -s DEVICE reverse tcp:8082 tcp:8082\n' +
                            '===========================================================================\n'
            )
        }
    }
}

task startServer(dependsOn: untarRealmServer)  {
    doLast {
//        def pidFile = new File('.', '.pid.lock')//TODO use BUIld var location to have a consistent path whenever we run the script
//        if (pidFile.exists()) {
//            // try to kill the previous process
//            def pid = pidFile.text
//            def process = "kill -9 $pid".execute()
//
//            try {
//                process.waitFor()
//            } finally {
//                pidFile.delete()
//            }
//        }
        //start new process
        def processBuilder = new ProcessBuilder(['nodejs','server.js', 'deebug.log'])
//        def processBuilder = new ProcessBuilder(['node','server.js', 'deebug.log'])
        processBuilder.directory(new File("$projectDir/test_server"))
        Process process = processBuilder.start()

         block until the server is up
        while (true) {
            def proc = "lsof -n -i4TCP:8888".execute()
            try {
                proc.waitFor()
            } finally {
                def exitValue = proc.exitValue()
                if (exitValue == 0) {
                    //set pid
//                    def pidField = process.class.getDeclaredField('pid')
//                    pidField.accessible = true
//                    pidFile << pidField.getInt(process)
                    break;
                } else {
                    // TODO add sleep to timeout
                    logger.error("Waiting for server to be up")
                }
            }
        }
    }
}


task reverseSyncServerPort(type: Exec) {
    def adb = android.getAdbExe()?.toString() ?: 'false'
    commandLine adb, 'reverse', 'tcp:7800', 'tcp:7800'
    ignoreExitValue true
    doLast {
        if (execResult.getExitValue() != 0) {
            logger.error(
                    '===========================================================================\n' +
                            'WARNING: Failed to automatically reverse port 7800.\n' +
                            'Please reverse this port from localhost to the device or emulator being used to run the application.\n' +
                            'You may need to add the appropriate flags to the command that failed:\n' +
                            '    adb -s DEVICE reverse tcp:7800 tcp:7800\n' +
                            '===========================================================================\n'
            )
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
}
